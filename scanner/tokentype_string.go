// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package scanner

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TOKEN_EOF-0]
	_ = x[TOKEN_LEFT_PAREN-1]
	_ = x[TOKEN_RIGHT_PAREN-2]
	_ = x[TOKEN_LEFT_BRACE-3]
	_ = x[TOKEN_RIGHT_BRACE-4]
	_ = x[TOKEN_COMMA-5]
	_ = x[TOKEN_DOT-6]
	_ = x[TOKEN_MINUS-7]
	_ = x[TOKEN_PLUS-8]
	_ = x[TOKEN_SEMICOLON-9]
	_ = x[TOKEN_SLASH-10]
	_ = x[TOKEN_STAR-11]
	_ = x[TOKEN_BANG-12]
	_ = x[TOKEN_BANG_EQUAL-13]
	_ = x[TOKEN_EQUAL-14]
	_ = x[TOKEN_EQUAL_EQUAL-15]
	_ = x[TOKEN_GREATER-16]
	_ = x[TOKEN_GREATER_EQUAL-17]
	_ = x[TOKEN_LESS-18]
	_ = x[TOKEN_LESS_EQUAL-19]
	_ = x[TOKEN_IDENTIFIER-20]
	_ = x[TOKEN_STRING-21]
	_ = x[TOKEN_NUMBER-22]
	_ = x[TOKEN_AND-23]
	_ = x[TOKEN_CLASS-24]
	_ = x[TOKEN_ELSE-25]
	_ = x[TOKEN_FALSE-26]
	_ = x[TOKEN_FOR-27]
	_ = x[TOKEN_FUN-28]
	_ = x[TOKEN_IF-29]
	_ = x[TOKEN_NIL-30]
	_ = x[TOKEN_OR-31]
	_ = x[TOKEN_PRINT-32]
	_ = x[TOKEN_RETURN-33]
	_ = x[TOKEN_SUPER-34]
	_ = x[TOKEN_THIS-35]
	_ = x[TOKEN_TRUE-36]
	_ = x[TOKEN_VAR-37]
	_ = x[TOKEN_WHILE-38]
	_ = x[TOKEN_ERROR-39]
}

const _TokenType_name = "TOKEN_EOFTOKEN_LEFT_PARENTOKEN_RIGHT_PARENTOKEN_LEFT_BRACETOKEN_RIGHT_BRACETOKEN_COMMATOKEN_DOTTOKEN_MINUSTOKEN_PLUSTOKEN_SEMICOLONTOKEN_SLASHTOKEN_STARTOKEN_BANGTOKEN_BANG_EQUALTOKEN_EQUALTOKEN_EQUAL_EQUALTOKEN_GREATERTOKEN_GREATER_EQUALTOKEN_LESSTOKEN_LESS_EQUALTOKEN_IDENTIFIERTOKEN_STRINGTOKEN_NUMBERTOKEN_ANDTOKEN_CLASSTOKEN_ELSETOKEN_FALSETOKEN_FORTOKEN_FUNTOKEN_IFTOKEN_NILTOKEN_ORTOKEN_PRINTTOKEN_RETURNTOKEN_SUPERTOKEN_THISTOKEN_TRUETOKEN_VARTOKEN_WHILETOKEN_ERROR"

var _TokenType_index = [...]uint16{0, 9, 25, 42, 58, 75, 86, 95, 106, 116, 131, 142, 152, 162, 178, 189, 206, 219, 238, 248, 264, 280, 292, 304, 313, 324, 334, 345, 354, 363, 371, 380, 388, 399, 411, 422, 432, 442, 451, 462, 473}

func (i TokenType) String() string {
	if i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
